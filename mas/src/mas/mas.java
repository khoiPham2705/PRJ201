package mas;
import java.util.Random;
import java.util.Scanner;

public class mas {
    private static final int SIMULATIONS = 10000;
    static Random random = new Random();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        double initialCapital = 500000000; // 500 tri·ªáu VND

        // Nh·∫≠p tham s·ªë cho Startup
        System.out.print("Nh·∫≠p s·ªë l∆∞·ª£ng startup ƒë·∫ßu t∆∞: ");
        int totalStartups = scanner.nextInt();
        System.out.print("Nh·∫≠p x√°c su·∫•t startup th√†nh c√¥ng (vd: 0.1 cho 10%): ");
        double successProbability = scanner.nextDouble();
        System.out.print("Nh·∫≠p l·ª£i nhu·∫≠n trung b√¨nh khi startup th√†nh c√¥ng (vd: 5.0 cho 500%): ");
        double meanReturn = scanner.nextDouble();
        System.out.print("Nh·∫≠p ƒë·ªô l·ªách chu·∫©n c·ªßa l·ª£i nhu·∫≠n (vd: 2.0 cho 200%): ");
        double stdDevReturn = scanner.nextDouble();

        // Nh·∫≠p tham s·ªë cho B·∫•t ƒë·ªông s·∫£n
        System.out.print("Nh·∫≠p t·ª∑ l·ªá tƒÉng tr∆∞·ªüng trung b√¨nh h√†ng nƒÉm c·ªßa BƒêS (vd: 0.12 cho 12%): ");
        double realEstateMeanGrowth = scanner.nextDouble();
        System.out.print("Nh·∫≠p ƒë·ªô l·ªách chu·∫©n c·ªßa t·ª∑ l·ªá tƒÉng tr∆∞·ªüng (vd: 0.02 cho 2%): ");
        double realEstateStdDev = scanner.nextDouble();

        // Nh·∫≠p tham s·ªë cho Ch·ª©ng kho√°n
        System.out.print("Nh·∫≠p t·ª∑ l·ªá l·ª£i nhu·∫≠n trung b√¨nh h√†ng nƒÉm c·ªßa ch·ª©ng kho√°n (vd: 0.15 cho 15%): ");
        double stockMeanReturn = scanner.nextDouble();
        System.out.print("Nh·∫≠p ƒë·ªô l·ªách chu·∫©n c·ªßa l·ª£i nhu·∫≠n ch·ª©ng kho√°n (vd: 0.2 cho 20%): ");
        double stockVolatility = scanner.nextDouble();

        // Nh·∫≠p tham s·ªë cho F&B
        System.out.print("Nh·∫≠p s·ªë kh√°ch trung b√¨nh m·ªói ng√†y (vd: 200): ");
        int avgCustomers = scanner.nextInt();
        System.out.print("Nh·∫≠p gi√° tr·ªã trung b√¨nh c·ªßa m·ªói ƒë∆°n h√†ng (vd: 50000 VND): ");
        double avgOrderValue = scanner.nextDouble();
        System.out.print("Nh·∫≠p chi ph√≠ v·∫≠n h√†nh h√†ng ng√†y (vd: 20000000 VND): ");
        double dailyOperatingCost = scanner.nextDouble();

        scanner.close();

        // Ch·∫°y m√¥ ph·ªèng
        double[] startupResults = simulateStartupInvestment(totalStartups, successProbability, meanReturn, stdDevReturn, initialCapital);
        double[] realEstateResults = simulateRealEstateInvestment(1, realEstateMeanGrowth, realEstateStdDev);
        double[] stockResults = simulateStockMarketInvestment(1, stockMeanReturn, stockVolatility);
        double[] fbResults = simulateFBInvestment(avgCustomers, avgOrderValue, dailyOperatingCost);

        // Xu·∫•t k·∫øt qu·∫£
        System.out.println("\nüìä K·∫øt qu·∫£ m√¥ ph·ªèng:");
        System.out.printf("Startup: %.2f l·∫ßn v·ªën ƒë·∫ßu t∆∞ | X√°c su·∫•t c√≥ l·ª£i nhu·∫≠n: %.2f%%\n", startupResults[0], startupResults[1] * 100);
        System.out.printf("B·∫•t ƒë·ªông s·∫£n: %.2f l·∫ßn v·ªën ƒë·∫ßu t∆∞ sau 10 nƒÉm | X√°c su·∫•t c√≥ l·ª£i nhu·∫≠n: %.2f%%\n", realEstateResults[0], realEstateResults[1] * 100);
        System.out.printf("Ch·ª©ng kho√°n: %.2f l·∫ßn v·ªën ƒë·∫ßu t∆∞ sau 10 nƒÉm | X√°c su·∫•t c√≥ l·ª£i nhu·∫≠n: %.2f%%\n", stockResults[0], stockResults[1] * 100);
        System.out.printf("Ng√†nh F&B: %.2f l·∫ßn v·ªën ƒë·∫ßu t∆∞ m·ªói ng√†y | X√°c su·∫•t c√≥ l·ª£i nhu·∫≠n: %.2f%%\n", fbResults[0] / initialCapital, fbResults[1] * 100);
    }

    private static double[] simulateStartupInvestment(int totalStartups, double successProbability, double meanReturn, double stdDevReturn, double initialInvestment) {
    double totalProfit = 0;
    int positiveCount = 0;

    for (int i = 0; i < SIMULATIONS; i++) {
        int successfulStartups = binomial(totalStartups, successProbability);
        double profit = 0;

        if (successfulStartups > 0) {
            for (int j = 0; j < successfulStartups; j++) {
                profit += normal(meanReturn, stdDevReturn) * (initialInvestment / totalStartups);
            }
        } else {
            // M·∫•t to√†n b·ªô v·ªën n·∫øu t·∫•t c·∫£ startup th·∫•t b·∫°i
            profit = -initialInvestment;
        }

        totalProfit += profit;
        if (profit > 0) positiveCount++;
    }

    return new double[]{totalProfit / SIMULATIONS, (double) positiveCount / SIMULATIONS};
}

    private static double[] simulateRealEstateInvestment(double capital, double meanGrowthRate, double stdDeviation) {
        int years = 10;
        double totalReturn = 0;
        int positiveCount = 0;

        for (int i = 0; i < SIMULATIONS; i++) {
            double value = capital;
            for (int j = 0; j < years; j++) {
                value *= 1 + (meanGrowthRate + random.nextGaussian() * stdDeviation);
            }
            totalReturn += value;
            if (value > capital) positiveCount++;
        }

        return new double[]{totalReturn / SIMULATIONS, (double) positiveCount / SIMULATIONS};
    }

    private static double[] simulateStockMarketInvestment(double capital, double meanReturn, double volatility) {
        int years = 10;
        double totalReturn = 0;
        int positiveCount = 0;

        for (int i = 0; i < SIMULATIONS; i++) {
            double value = capital;
            for (int j = 0; j < years; j++) {
                value *= 1 + (meanReturn + random.nextGaussian() * volatility);
            }
            totalReturn += value;
            if (value > capital) positiveCount++;
        }

        return new double[]{totalReturn / SIMULATIONS, (double) positiveCount / SIMULATIONS};
    }

    private static double[] simulateFBInvestment(int avgCustomers, double avgOrderValue, double dailyOperatingCost) {
        double totalProfit = 0;
        int positiveCount = 0;

        for (int i = 0; i < SIMULATIONS; i++) {
            int customers = poisson(avgCustomers);
            double revenue = customers * avgOrderValue;
            double profit = revenue - dailyOperatingCost;
            totalProfit += profit;
            if (profit > 0) positiveCount++;
        }

        return new double[]{totalProfit / SIMULATIONS, (double) positiveCount / SIMULATIONS};
    }

    public static int poisson(int lambda) {
        int k = 0;
        double p = 1.0;
        double L = Math.exp(-lambda);
        do {
            k++;
            p *= random.nextDouble();
        } while (p > L);
        return k - 1;
    }

    public static int binomial(int n, double p) {
        int successes = 0;
        for (int i = 0; i < n; i++) {
            if (random.nextDouble() < p) {
                successes++;
            }
        }
        return successes;
    }

    public static double normal(double mean, double stdDev) {
        return mean + stdDev * random.nextGaussian();
    }
}
